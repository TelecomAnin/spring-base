##-------------------------------------------------------------------------------------------------------
## JPA beans suffix
#set ( $env.entityClassNameSuffix = "" )
##-------------------------------------------------------------------------------------------------------
#if( $entity.hasCompositePrimaryKey() )
#set( $entityKeyType = ${entity.name} + "EntityKey" )
#else
#if($entity.keyAttributesCount > 0)
#set( $entityKeyType = ${entity.keyAttributes[0].formattedType(0)} )
#end
#if($entity.keyAttributesCount <= 0)
#set( $entityKeyType = "Integer" )
#end
#end
#set($numberDtoPackage = "ci.smile.cmiV2.helper.contrat" )
##-------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder(${SRC})};

#foreach( $import in $java.imports($entity) )
import $import;
#end
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

import org.springframework.dao.DataAccessException;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import ${ROOT_PKG}.helper.dto.*;
import ${ROOT_PKG}.helper.contrat.*;
import ${ENTITY_PKG}.*;
#if ( $entity.hasCompositePrimaryKey() )
import ${ENTITY_PKG}.${entityKeyType};
#end

/**
 * Repository : ${entity.name}.
 */
@Repository
public interface ${entity.name}Repository extends JpaRepository<${entity.name}, ${entityKeyType}> {
#foreach( $field in $entity.getAttributesByCriteria( $const.KEY ) )
	/**
	 * Finds ${entity.name} by using ${field.name} as a search criteria.
	 * 
	 * @param ${field.name}
	 * @return An Object ${entity.name} whose ${field.name} is equals to the given ${field.name}. If
	 *         no ${entity.name} is found, this method returns null.
	 */
	@Query("select e from ${entity.name} e where e.${field.name} = :${field.name}#foreach( $attrib in $entity.nonKeyAttributes )#if( ${attrib.name} == "isDeleted" && ${field.name} != "isDeleted" ) and e.isDeleted = :isDeleted#end#end")
	${entity.name} findBy$fn.capitalize(${field.name})(@Param("${field.name}")${field.type} ${field.name}#foreach( $attrib in $entity.nonKeyAttributes )#if( ${attrib.name} == "isDeleted" && ${field.name} != "isDeleted" ), @Param("isDeleted")Boolean isDeleted#end#end);

#end
#foreach( $field in $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
	/**
	 * Finds ${entity.name} by using ${field.name} as a search criteria.
	 * 
	 * @param ${field.name}
	 * @return An Object ${entity.name} whose ${field.name} is equals to the given ${field.name}. If
	 *         no ${entity.name} is found, this method returns null.
	 */
	@Query("select e from ${entity.name} e where e.${field.name} = :${field.name}#foreach( $attrib in $entity.nonKeyAttributes )#if( ${attrib.name} == "isDeleted" && ${field.name} != "isDeleted" ) and e.isDeleted = :isDeleted#end#end")
#if($field.name == "code" || $field.name == "name")
	${entity.name} findBy$fn.capitalize(${field.name})(@Param("${field.name}")${field.type} ${field.name}#foreach( $attrib in $entity.nonKeyAttributes )#if( ${attrib.name} == "isDeleted" && ${field.name} != "isDeleted" ), @Param("isDeleted")Boolean isDeleted#end#end);
#end
#if($field.name != "code" && $field.name != "name")
	List<${entity.name}> findBy$fn.capitalize(${field.name})(@Param("${field.name}")${field.type} ${field.name}#foreach( $attrib in $entity.nonKeyAttributes )#if( ${attrib.name} == "isDeleted" && ${field.name} != "isDeleted" ), @Param("isDeleted")Boolean isDeleted#end#end);
#end
#end

###foreach( $field in $entity.getAttributesByCriteria( $const.IN_SELECTED_LINKS ) )
##	/**
##	 * Finds ${entity.name} by using ${field.name} as a search criteria.
##	 * 
##	 * @param ${field.name}
##	 * @return An Object ${entity.name} whose ${field.name} is equals to the given ${field.name}. If
##	 *         no ${entity.name} is found, this method returns null.
##	 */
##	@Query("select e from ${entity.name} e where e.${fn.uncapitalize($field.referencedEntityType)}.id = :${field.name}#foreach( $attrib in $entity.nonKeyAttributes )#if( ${attrib.name} == "isDeleted" && ${field.name} != "isDeleted" ) and e.isDeleted = :isDeleted#end#end")
##	List<${entity.name}> findBy$fn.capitalize($field.name)(@Param("${field.name}")$field.type ${field.name}#foreach( $attrib in $entity.nonKeyAttributes )#if( ${attrib.name} == "isDeleted" && ${field.name} != "isDeleted" ), @Param("isDeleted")Boolean isDeleted#end#end);
##
###end
#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#set( $entityFk = $link.targetEntity)
#foreach($joinColumn in $link.joinColumns)
#set( $attribFk = $entity.getAttributeByColumnName($joinColumn.name) )
#set($refFieldName = $attribFk.name)
#set($refFieldType = $attribFk.type)
#set($refFieldGetter = $attribFk.getter)
#end
	/**
	 * Finds ${entity.name} by using ${refFieldName} as a search criteria.
	 * 
	 * @param ${refFieldName}
	 * @return An Object ${entity.name} whose ${refFieldName} is equals to the given ${refFieldName}. If
	 *         no ${entity.name} is found, this method returns null.
	 */
	@Query("select e from ${entity.name} e where e.${fn.uncapitalize($link.fieldName)}.#foreach( $attrib in $entityFk.keyAttributes )$attrib.name#end = :${refFieldName}#foreach( $attrib in $entity.nonKeyAttributes )#if( ${attrib.name} == "isDeleted" && ${refFieldName} != "isDeleted" ) and e.isDeleted = :isDeleted#end#end")
	List<${entity.name}> findBy$fn.capitalize($refFieldName)(@Param("${refFieldName}")$refFieldType ${refFieldName}#foreach( $attrib in $entity.nonKeyAttributes )#if( ${attrib.name} == "isDeleted" && ${refFieldName} != "isDeleted" ), @Param("isDeleted")Boolean isDeleted#end#end);

#end
#end
	/**
	 * Finds List of ${entity.name} by using $fn.uncapitalize(${entity.name})Dto as a search criteria.
	 * 
	 * @param request, em
	 * @return A List of ${entity.name}
	 * @throws DataAccessException,ParseException
	 */
	public default List<${entity.name}> getByCriteria(Request request, EntityManager em) throws DataAccessException, ParseException {
		String req = "select e from ${entity.name} e where e IS NOT NULL";
		HashMap<String, Object> param = new HashMap<>();

		${entity.name}Dto dto = request.getData${entity.name}();
		
#foreach( $attrib in $entity.nonKeyAttributes )
#if( ${attrib.name} == "isDeleted" )
		dto.setIsDeleted(false);
#end
#end
		req = generateCriteria(dto, req, param);
		req += " order by #foreach( $field in $entity.keyAttributes ) e.$field.name#end desc";

		TypedQuery<${entity.name}> query = em.createQuery(req, ${entity.name}.class);

		for (Map.Entry<String, Object> entry : param.entrySet()) {
			query.setParameter(entry.getKey(), entry.getValue());
		}

		if (request.getIndex() != null && request.getSize() != null) {
			query.setFirstResult(request.getIndex() * request.getSize());
			query.setMaxResults(request.getSize());
		}

		return query.getResultList();
	}

	/**
	 * Finds count of ${entity.name} by using $fn.uncapitalize(${entity.name})Dto as a search criteria.
	 * 
	 * @param request,em
	 * @return Number of ${entity.name}
	 * 
	 */
	public default Long count(Request request, EntityManager em) throws DataAccessException, ParseException  {
		String req = "select new ${numberDtoPackage}.NumberDto(count(e.id)) from ${entity.name} e where e IS NOT NULL";
		HashMap<String, Object> param = new HashMap<>();

		${entity.name}Dto dto = request.getData${entity.name}();

#foreach( $attrib in $entity.nonKeyAttributes )
#if( ${attrib.name} == "isDeleted" )
		dto.setIsDeleted(false);
#end
#end
		req = generateCriteria(dto, req, param);

		javax.persistence.Query query = em.createQuery(req);

		for (Map.Entry<String, Object> entry : param.entrySet()) {
			query.setParameter(entry.getKey(), entry.getValue());
		}

		NumberDto number = (NumberDto) query.getResultList().get(0);
		return number.getNombre();
	}

	default String generateCriteria(${entity.name}Dto dto, String req, HashMap<String, Object> param) throws ParseException{
		if (dto != null) {
#foreach( $field in $entity.getAttributesByCriteria( $const.NOT_IN_LINKS ) )
#if( $field.isNumberType() && !$field.isBigDecimalType() )
			if (dto.${field.getter}()!= null && dto.${field.getter}() > 0) {
				req += " AND e.$field.name = :$field.name";
				param.put("$field.name", dto.${field.getter}());
			}
#end
#if( $field.isNumberType() && $field.isBigDecimalType() )
			if (dto.${field.getter}()!= null && dto.${field.getter}().intValue() > 0) {
				req += " AND e.$field.name = :$field.name";
				param.put("$field.name", dto.${field.getter}());
			}
#end
#if( $field.isStringType() )
			if (dto.${field.getter}()!= null && !dto.${field.getter}().isEmpty()) {
				req += " AND e.$field.name = :$field.name";
				param.put("$field.name", dto.${field.getter}());
			}
#end
#if( !$field.isStringType() && !$field.isNumberType() && $field.isUtilDateType() )
			if (dto.${field.getter}()!= null && !dto.${field.getter}().isEmpty()) {
				req += " AND FUNCTION('DAY', e.$field.name) = FUNCTION('DAY', :$field.name) AND FUNCTION('MONTH', e.$field.name) = FUNCTION('MONTH', :$field.name) AND FUNCTION('YEAR', e.$field.name) = FUNCTION('YEAR', :$field.name) ";
				param.put("$field.name",  new SimpleDateFormat("dd/MM/yyyy").parse(dto.${field.getter}()));
			}
#end
#if( !$field.isStringType() && !$field.isNumberType() && !$field.isUtilDateType() )
			if (dto.${field.getter}()!= null) {
				req += " AND e.$field.name = :$field.name";
				param.put("$field.name", dto.${field.getter}());
			}
#end			
#end
###foreach( $field in $entity.getAttributesByCriteria( $const.IN_SELECTED_LINKS ) )
###if( $field.isNumberType() )
##			if (dto.${field.getter}()!= null && dto.${field.getter}() > 0) {
##				req += " AND e.${fn.uncapitalize($field.referencedEntityType)}.id = :$field.name";
##				param.put("$field.name", dto.${field.getter}());
##			}
###end
###if( $field.isStringType() )
##			if (dto.${field.getter}()!= null && !dto.${field.getter}().isEmpty()) {
##				req += " AND e.${fn.uncapitalize($field.referencedEntityType)}.id = :$field.name";
##				param.put("$field.name", dto.${field.getter}());
##			}
###end		
###end
#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#set( $entityFk = $link.targetEntity)
#foreach($joinColumn in $link.joinColumns)
#set( $attribFk = $entity.getAttributeByColumnName($joinColumn.name) )
#set($refFieldName = $attribFk.name)
#set($refFieldGetter = $attribFk.getter)
#set($isStringType = $attribFk.isStringType())
#set($isNumberType = $attribFk.isNumberType())
#end
#if( $isNumberType )
			if (dto.${refFieldGetter}()!= null && dto.${refFieldGetter}() > 0) {
				req += " AND e.${fn.uncapitalize($link.fieldName)}.#foreach( $attrib in $entityFk.keyAttributes )$attrib.name#end = :$refFieldName";
				param.put("$refFieldName", dto.${refFieldGetter}());
			}
#end
#if( $isStringType )
			if (dto.${refFieldGetter}()!= null && !dto.${refFieldGetter}().isEmpty()) {
				req += " AND e.${fn.uncapitalize($link.fieldName)}.#foreach( $attrib in $entityFk.keyAttributes )$attrib.name#end = :$refFieldName";
				param.put("$refFieldName", dto.${refFieldGetter}());
			}
#end	
#end
#end
		}
		
		return req;
	}
}
