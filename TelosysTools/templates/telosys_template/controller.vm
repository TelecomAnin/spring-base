##----------------------------------------------------------------------------------------------------
## JPA beans suffix

#set ( $dto = ${entity.name} + "Dto" )
#set ( $controllerName = ${entity.name} + "Controller" )
#set ( $businessName = ${entity.name} + "Business" )
/*
 * Java transformer for entity table ${entity.databaseTable} 
 * Created on $today.date ( Time $today.time )
 * Generator tool : $generator.name ( version $generator.version )
 * Copyright 2017 Savoir Faire Linux. All Rights Reserved.
 */

package ${target.javaPackageFromFolder(${SRC})};

import java.util.HashMap;
import java.util.Map;
import java.util.Locale;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.CannotCreateTransactionException;
import org.springframework.transaction.TransactionSystemException;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import ${ROOT_PKG}.helper.dto.*;
import ${ROOT_PKG}.helper.dto.transformer.*;
import ${ROOT_PKG}.helper.contrat.*;
import ${ENTITY_PKG}.*;
import ${ROOT_PKG}.helper.*;
import ${ROOT_PKG}.business.*;


/**
Controller for table "${entity.databaseTable}"
 * 
 * @author SFL Back-End developper
 *
 */
@CrossOrigin("*")
@RestController
@RequestMapping(value="/${fn.uncapitalize($entity.name)}")
public class ${controllerName} {

	private Response response;

	@Autowired
	private ${businessName} $fn.uncapitalize(${businessName});

#if( ${businessName} == "TenancyBusiness")
	@Autowired
	private TenancyBusiness tenancyBusiness;
#end

	@Autowired
	private FunctionalError functionalError;
	
	@Autowired
	private TechnicalError technicalError;

	@Autowired
	private ExceptionUtils			exceptionUtils;

	private Logger slf4jLogger = LoggerFactory.getLogger(getClass());
	
	@Autowired
	private HttpServletRequest requestBasic;
	
	public Response validateObject(Request request, Locale locale) throws Exception {
        boolean ostate = true;
        response.setStatus(functionalError.REQUEST_FAIL("", locale));
        if (request == null) {
            response.setHasError(ostate);
            response.setStatus(functionalError.REQUEST_FAIL("la requete est vide", locale));
            return response;
        }
        if (request.getData${entity.name}() == null) {
            response.setHasError(ostate);
            response.setStatus(functionalError.REQUEST_FAIL("", locale));
            return response;
        }
        
        ostate = false;
        response.setHasError(ostate);
        return response;
    }

    public Response validateList(Request request, Locale locale) throws Exception {
        boolean ostate = true;
        response.setStatus(functionalError.REQUEST_FAIL("", locale));
        if (request == null) {
            response.setHasError(ostate);
            response.setStatus(functionalError.REQUEST_FAIL("la requete est vide", locale));
            return response;
        }
        if (request.getDatas${entity.name}() == null) {
            response.setHasError(ostate);
            response.setStatus(functionalError.REQUEST_FAIL("", locale));
            return response;
        }
        
        if (request.getDatas${entity.name}().isEmpty()) {
            response.setHasError(ostate);
            response.setStatus(functionalError.REQUEST_FAIL("la liste fournie est vide", locale));
            return response;
        }
        
        ostate = false;
        response.setHasError(ostate);
        return response;
    }

	@RequestMapping(value="/create",method=RequestMethod.POST,consumes = {"application/json"},produces={"application/json"})
    public Response create(@RequestBody Request request) {
    	slf4jLogger.info("start method create");
        response = new Response();
        
        String languageID = (String)requestBasic.getAttribute("CURRENT_LANGUAGE_IDENTIFIER");
        Locale locale = new Locale(languageID, "");

        try {
			##String tenantID = (String)requestBasic.getAttribute("CURRENT_TENANT_IDENTIFIER");
			##slf4jLogger.info("tenantID send: " + tenantID);
			##MDC.put("tenant_id", tenantID);
            ##TenancyDto tenant = tenancyBusiness.getTenant((String) tenantID);
            ##if (tenant != null){
            ##	CurrentTenantId.set(tenantID);
            ##}

        	response = validateList(request, locale);
        	if(!response.isHasError()){
               response = ${fn.uncapitalize($businessName)}.create(request, locale);
        	}else{
        	   slf4jLogger.info("Erreur| code: {} -  message: {}", response.getStatus().getCode(), response.getStatus().getMessage());
        	   return response;
        	}
        	
        	if(!response.isHasError()){
				response.setStatus(functionalError.SUCCESS("", locale));
        	    slf4jLogger.info("end method create");
          	    slf4jLogger.info("code: {} -  message: {}", StatusCode.SUCCESS, StatusMessage.SUCCESS);  
            }else{
             	slf4jLogger.info("Erreur| code: {} -  message: {}", response.getStatus().getCode(), response.getStatus().getMessage());
            }
 
        } catch (CannotCreateTransactionException e) {
			exceptionUtils.CANNOT_CREATE_TRANSACTION_EXCEPTION(response, locale, e);
		} catch (TransactionSystemException e) {
			exceptionUtils.TRANSACTION_SYSTEM_EXCEPTION(response, locale, e);
		} catch (RuntimeException e) {
			exceptionUtils.RUNTIME_EXCEPTION(response, locale, e);
		} catch (Exception e) {
			exceptionUtils.EXCEPTION(response, locale, e);
		}
        return response;
    }

	@RequestMapping(value="/update",method=RequestMethod.POST,consumes = {"application/json"},produces={"application/json"})
    public Response update(@RequestBody Request request) {
    	slf4jLogger.info("start method update");
        response = new Response();

        String languageID = (String)requestBasic.getAttribute("CURRENT_LANGUAGE_IDENTIFIER");
        Locale locale = new Locale(languageID, "");
        
		try {
			##String tenantID = (String)requestBasic.getAttribute("CURRENT_TENANT_IDENTIFIER");
			##slf4jLogger.info("tenantID send: " + tenantID);
			##MDC.put("tenant_id", tenantID);
            ##TenancyDto tenant = tenancyBusiness.getTenant((String) tenantID);
            ##if (tenant != null){
            ##	CurrentTenantId.set(tenantID);
            ##}

        	response = validateList(request, locale);
        	if(!response.isHasError()){
               response = ${fn.uncapitalize($businessName)}.update(request, locale);
        	}else{
        	   slf4jLogger.info("Erreur| code: {} -  message: {}", response.getStatus().getCode(), response.getStatus().getMessage());
        	   return response;
        	}
        	
        	if(!response.isHasError()){
				response.setStatus(functionalError.SUCCESS("", locale));
        	  	slf4jLogger.info("end method update");
          	  	slf4jLogger.info("code: {} -  message: {}", StatusCode.SUCCESS, StatusMessage.SUCCESS);  
            }else{
              	slf4jLogger.info("Erreur| code: {} -  message: {}", response.getStatus().getCode(), response.getStatus().getMessage());
            }
 
        } catch (CannotCreateTransactionException e) {
			exceptionUtils.CANNOT_CREATE_TRANSACTION_EXCEPTION(response, locale, e);
		} catch (TransactionSystemException e) {
			exceptionUtils.TRANSACTION_SYSTEM_EXCEPTION(response, locale, e);
		} catch (RuntimeException e) {
			exceptionUtils.RUNTIME_EXCEPTION(response, locale, e);
		} catch (Exception e) {
			exceptionUtils.EXCEPTION(response, locale, e);
		}
        return response;
    }

	@RequestMapping(value="/delete",method=RequestMethod.POST,consumes = {"application/json"},produces={"application/json"})
    public Response delete(@RequestBody Request request) {
    	slf4jLogger.info("start method delete");
        response = new Response();

        String languageID = (String)requestBasic.getAttribute("CURRENT_LANGUAGE_IDENTIFIER");
        Locale locale = new Locale(languageID, "");

        try {
			##String tenantID = (String)requestBasic.getAttribute("CURRENT_TENANT_IDENTIFIER");
			##slf4jLogger.info("tenantID send: " + tenantID);
			##MDC.put("tenant_id", tenantID);
            ##TenancyDto tenant = tenancyBusiness.getTenant((String) tenantID);
            ##if (tenant != null){
            ##	CurrentTenantId.set(tenantID);
            ##}

        	response = validateList(request, locale);
        	if(!response.isHasError()){
               response = ${fn.uncapitalize($businessName)}.delete(request, locale);
        	}else{
        	   slf4jLogger.info("Erreur| code: {} -  message: {}", response.getStatus().getCode(), response.getStatus().getMessage());
        	   return response;
        	}
        	
        	if(!response.isHasError()){
				response.setStatus(functionalError.SUCCESS("", locale));
        	  	slf4jLogger.info("end method delete");
          	  	slf4jLogger.info("code: {} -  message: {}", StatusCode.SUCCESS, StatusMessage.SUCCESS);  
            }else{
              slf4jLogger.info("Erreur| code: {} -  message: {}", response.getStatus().getCode(), response.getStatus().getMessage());
            }
 
        } catch (CannotCreateTransactionException e) {
			exceptionUtils.CANNOT_CREATE_TRANSACTION_EXCEPTION(response, locale, e);
		} catch (TransactionSystemException e) {
			exceptionUtils.TRANSACTION_SYSTEM_EXCEPTION(response, locale, e);
		} catch (RuntimeException e) {
			exceptionUtils.RUNTIME_EXCEPTION(response, locale, e);
		} catch (Exception e) {
			exceptionUtils.EXCEPTION(response, locale, e);
		}
        return response;
    }

	@RequestMapping(value="/getByCriteria",method=RequestMethod.POST,consumes = {"application/json"},produces={"application/json"})
    public Response getByCriteria(@RequestBody Request request) {
    	slf4jLogger.info("start method getByCriteria");
        response = new Response();

        String languageID = (String)requestBasic.getAttribute("CURRENT_LANGUAGE_IDENTIFIER");
        Locale locale = new Locale(languageID, "");

        try {
			##String tenantID = (String)requestBasic.getAttribute("CURRENT_TENANT_IDENTIFIER");
			##slf4jLogger.info("tenantID send: " + tenantID);
			##MDC.put("tenant_id", tenantID);
            ##TenancyDto tenant = tenancyBusiness.getTenant((String) tenantID);
            ##if (tenant != null){
            ##	CurrentTenantId.set(tenantID);
            ##}

        	response = validateObject(request, locale);
        	if(!response.isHasError()){
               response = ${fn.uncapitalize($businessName)}.getByCriteria(request, locale);
        	}else{
        	   slf4jLogger.info("Erreur| code: {} -  message: {}", response.getStatus().getCode(), response.getStatus().getMessage());
        	   return response;
        	}
        	
        	if(!response.isHasError()){
        	  	slf4jLogger.info("end method getByCriteria");
          	  	slf4jLogger.info("code: {} -  message: {}", StatusCode.SUCCESS, StatusMessage.SUCCESS);  
            }else{
              	slf4jLogger.info("Erreur| code: {} -  message: {}", response.getStatus().getCode(), response.getStatus().getMessage());
            }
 
        } catch (CannotCreateTransactionException e) {
			exceptionUtils.CANNOT_CREATE_TRANSACTION_EXCEPTION(response, locale, e);
		} catch (TransactionSystemException e) {
			exceptionUtils.TRANSACTION_SYSTEM_EXCEPTION(response, locale, e);
		} catch (RuntimeException e) {
			exceptionUtils.RUNTIME_EXCEPTION(response, locale, e);
		} catch (Exception e) {
			exceptionUtils.EXCEPTION(response, locale, e);
		}
        return response;
    }
}
