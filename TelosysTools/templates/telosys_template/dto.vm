##----------------------------------------------------------------------------------------------------
## JPA beans suffix
##set ( $env.entityClassNameSuffix = "Dto" )
#set ( $dto = ${entity.name} + "Dto" )

/*
 * Java dto for entity table ${entity.databaseTable} 
 * Created on $today.date ( Time $today.time )
 * Generator tool : $generator.name ( version $generator.version )
 * Copyright 2017 Savoir Faire Linux. All Rights Reserved.
 */

package ${target.javaPackageFromFolder(${SRC})};

#foreach( $import in $java.imports($entity) )
import $import;
#end
#foreach( $import in $java.imports($entity.attributes) )
import $import;
#end
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

##import ${DTO_PKG}.contrat.SearchParam;


/**
 * DTO for table "${entity.databaseTable}"
 * 
 * @author SFL Back-End developper
 *
 */
@JsonInclude(Include.NON_NULL)
public class ${dto} {

#foreach( $field in $entity.keyAttributes )
    private $field.formattedType(10) $field.formattedName(20) #if($field.hasInitialValue())= ${field.initialValue} #end; // Primary Key
#end

#foreach( $field in $entity.nonKeyAttributes )
#if ( !$field.isUtilDateType() )
    private $field.formattedType(10) $field.formattedName(20) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end
#if ( $field.isUtilDateType() )
#set ( $padderString = "" )
	private $padderString.format("%-10s", "String") $field.formattedName(20) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end
#end

    //----------------------------------------------------------------------
    // ENTITY LINKS FIELD ( RELATIONSHIP )
    //----------------------------------------------------------------------
#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#set( $entityFk = $link.targetEntity)
##--------------------
#foreach($attrib in $entityFk.attributes)
#set( $currentLinkField = "$fn.uncapitalize($entityFk.name)$fn.capitalize($attrib.name)" )
#if( $attrib.name == "code" || $attrib.name == "name" )
	private String $currentLinkField;
#end
#end
##--------------------
#end
#end

##    //----------------------------------------------------------------------
##    // ENTITY LINKS ( RELATIONSHIP )
##    //----------------------------------------------------------------------
#### #foreach( $link in $entity.links )
###foreach( $link in $entity.selectedLinks )
##    private ${link.formattedFieldType(0)} $link.formattedFieldName(12);
###end

##	// Search param
##foreach( $field in $entity.attributes)
##set ( $padderString = "" )
##set ( $searchParamType = "SearchParam<" + ${field.type} + ">" )
##set ( $searchParamName = ${field.name} + "SearchParam" )
##	private $padderString.format("%-22s%-22s%-22s", $searchParamType, $searchParamName, ";")
###end

    /**
     * Default constructor
     */
    public ${dto}()
    {
        super();
    }
    
    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR THE PRIMARY KEY 
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )
    /**
     * Set the "$field.name" field value
     * @param $field.name
     */
    public void ${field.setter}( $field.type $field.name ){
        this.$field.name = $field.name;
    }
#end
#if ( $field.getter )
    /**
     * Get the "$field.name" field value
     * @return the field value
     */
    public $field.type ${field.getter}(){
        return this.$field.name;
    }
#end

#end

    //----------------------------------------------------------------------
    // GETTER(S) & SETTER(S) FOR DATA FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $entity.nonKeyAttributes )
#if ( $field.setter )    
    /**
     * Set the "$field.name" field value
     * @param $field.name
     */
#if ( !$field.isUtilDateType() )
	public void ${field.setter}( $field.type $field.name )
    {
        this.$field.name = $field.name ;
    }
#end
#if ( $field.isUtilDateType() ) 
	public void ${field.setter}( String $field.name )
    {
        this.$field.name = $field.name ;
    }
#end
#end
#if ( $field.getter )    
    /**
     * Get the "$field.name" field value
     * @return the field value
     */
#if ( !$field.isUtilDateType() ) 
	public $field.type ${field.getter}()
    {
        return this.$field.name;
    }
#end
#if ( $field.isUtilDateType() ) 
	public String ${field.getter}()
    {
        return this.$field.name;
    }
#end
#end

#end

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS FIELD ( RELATIONSHIP )
    //----------------------------------------------------------------------
#foreach( $link in $entity.selectedLinks )
#if($link.isCardinalityManyToOne() || $link.isCardinalityOneToOne())
#set( $entityFk = $link.targetEntity)
##--------------------
#foreach($attrib in $entityFk.attributes)
#set( $currentLinkField = "$fn.uncapitalize($entityFk.name)$fn.capitalize($attrib.name)" )
#if( $attrib.name == "code" || $attrib.name == "name" )
	public String get$fn.capitalize($currentLinkField)()
    {
        return this.$currentLinkField;
    }
	public void set$fn.capitalize($currentLinkField)(String $currentLinkField)
    {
        this.$currentLinkField = $currentLinkField;
    }

#end
#end
##--------------------
#end
#end
##    //----------------------------------------------------------------------
##    // GETTERS & SETTERS FOR LINKS
##    //----------------------------------------------------------------------
#### #foreach( $link in $entity.links )
###foreach( $link in $entity.selectedLinks )
###if ( $link.setter )    public void ${link.setter}( ${link.formattedFieldType(0)} ${link.formattedFieldName(0)} ) {
##        this.${link.formattedFieldName(0)} = ${link.formattedFieldName(0)};
##    }
###end
###if ( $link.getter )    public ${link.formattedFieldType(0)} ${link.getter}() {
##        return this.${link.formattedFieldName(0)};
##    }
###end
##
###end

##	//----------------------------------------------------------------------
##    // GETTER(S) & SETTER(S) FOR SEARCH PARAM FIELDS
##    //----------------------------------------------------------------------
###foreach( $field in $entity.attributes)
###set ( $padderString = "" )
###set ( $searchParamType = "SearchParam<" + ${field.type} + ">" )
###set ( $searchParamName = ${field.name} + "SearchParam" )
###set ( $searchParamGetter = ${field.getter} + "SearchParam" )
###set ( $searchParamSetter = ${field.setter} + "SearchParam" )
##	/**
##     * Get the "$searchParamName" field value
##     * @return the field value
##     */	
##	public $searchParamType $searchParamGetter(){
##		return this.$searchParamName;
##	}
##	/**
##     * Set the "$searchParamName" field value
##     * @param $searchParamName
##     */
##    public void ${searchParamSetter}( $searchParamType $searchParamName ){
##        this.$searchParamName = $searchParamName;
##    }
##
###end

	//----------------------------------------------------------------------
    // equals METHOD
    //----------------------------------------------------------------------
$java.equalsMethod($dto, $entity.keyAttributes )

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
##$java.toStringMethod($entity, $dataFields, "compositePrimaryKey", 4)
    public String toString() {
		StringBuffer sb = new StringBuffer(); 
#set( $count = 0 )
#foreach( $field in $entity.getAttributesByCriteria( $const.NOT_IN_SELECTED_LINKS ) )
#if( $count > 0 )
		sb.append("|"); 
#end
		sb.append($field.name); 
#set( $count = $count + 1 )
#end  
        return sb.toString();
    }
}
